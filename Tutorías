Tutorías 

TUTORÍA(28/03/2022)

*Al final la tutoría se movió al día martes,28 de Marzo de 2022(estaba para el jueves 31):

Preguntas sobre el proyecto:

1-Nos falta poner los nombres en mayúsculas de las tablas
2-Nos falta poner los nombres de las columnas(@Column), ¿Es necesario, verdad?
2.1-¿Las fechas se modelan como String o tendría que utilizar java.util.date?
2.2-¿La contraseña se guarda como un hash dentro de la base de datos?
2.3-¿Se tendrían que hacer constructores de todas las entidades?.En el caso de tener tablas con parámetros opcionales y obligatorios, ¿Se harían dos constructores, uno que añada solo los obligatorios y otro que lo añada todo?
3-No tiene sentido que si borro un cliente este siga en las tablas USER_APKy PRES_AUTO, ¿Dónde tendría que colocar el cascade en el @onetoone?
4-La tabla individual de cliente, ¿La modelamos como herencia sólo, no?
5-¿Cómo se modelaría las relaciones de TRANS y DIVISA? Me refiero a esa doble relación, ¿Se modela igual pero le cambió el nombre a la relación y ya?

Respuestas de la tutoría:

1-Hecho
2-Es necesario en teoría, hecho
2.1-Con java.util.date, hecho
2.2-No relevante por ahora pero si
2.3-Si, es más fácil la división de constructores para un futuro
3-No preguntado(próxima tutoría)
4-Hecho(nada de dudas al final)
5-Omitimos una relación que había, una entre divisa y trans. Además es de un solo sentido.


TUTORÍA(31/03/2022)

Preguntas que han surgido después de hacer los cambios producidos por las preguntas anteriores:

1-¿Las relaciones de los HashMaps están bien?Si están mal,¿Cómo los haríamos?
1.1-¿Haría falta nombre las foreignkey en las relaciones de las entidades JPA?
2-¿Algunos parámetros del ddl están en minúsculas(ejemplo persAuto y cuentaRef)?
3-¿CASCADE es necesario para algunas relaciones?¿Cómo se haría?
4-Enseñar el diagrama de nuevo
4.1-Los valores de clave únicas que hacemos(posible clave compuesta persauto y cliente).
5-¿Implements serializable es necesatio en todas las clases?
6-¿Se debería usar Comparable para comparar los hash de las claves en userAPK?
7-¿Dentro de los constructores deberían estar los atributos que se utlizan para las relaciones?
8-¿Debería haber getters and setters de los atributos de las relaciones?

Respuestas de la tutoría:

1. Debe hacerse Map en ambos sentidos de la relación cambiando JoinColumn por MapKeyJoinColumn y la clave del Map

Ejemplo:

CuentaRef --> PooledAccount

@ElementCollection
    @CollectionTable(name="DEPOSITEN",joinColumns = {@JoinColumn(name="IBANPOOLEDACCOUNT")})
	@MapKeyJoinColumn(name="IBANCUENTAREF")
	@Column(name="SALDO")
    private Map<PooledAccount, Double> depositEn = new HashMap<>();

PooledAccount --> CuentaRef

@ElementCollection
    @CollectionTable(name="DEPOSITEN",joinColumns = {@JoinColumn(name="IBANCUENTAREF")})
	@MapKeyJoinColumn(name="IBANPOOLEDACCOUNT")
	@Column(name="SALDO")
    private Map<CuentaRef, Double> depositEn = new HashMap<>();

1.1. No es necesario.
2. Porque al establecer el nombre de las tablas en los Map se debe hacer en mayúsculas si queremos que el ddl tenga todos los atributos en mayúsculas.
3. No necesario en principio para la P1, posible pregunta en P2.
4. Hay que añadir otra relación de Trans a Divisa, ya que había dos relaciones para indicar la moneda origen y la moneda de destino para efectuar 
un posible cambio de divisa en la transferencia.
4.1. Sólo usaremos las PK, no tendremos en cuenta las únicas.
5. Si.
6. Por ahora no, pero no se descarta para futuras prácticas.
7. No es estrictamente necesario.
8. Igual que en la pregunta anterior, no es estrictamente necesario.


Próximas tutorías...
